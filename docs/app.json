[{"name":"app.R","content":"#Install require apps:\r\nif (!requireNamespace(\"shiny\", quietly = TRUE)) install.packages(\"shiny\")\r\nif (!requireNamespace(\"plotly\", quietly = TRUE)) install.packages(\"plotly\")\r\nif (!requireNamespace(\"DT\", quietly = TRUE)) install.packages(\"DT\")\r\nif (!requireNamespace(\"stringr\", quietly = TRUE)) install.packages(\"stringr\")\r\nif (!requireNamespace(\"paletteer\", quietly = TRUE)) install.packages(\"paletteer\")\r\n\r\n# app.R\r\nlibrary(shiny)\r\nlibrary(plotly)\r\nlibrary(dplyr)\r\nlibrary(tidyr)\r\nlibrary(DT)\r\nlibrary(stringr)\r\n\r\n# Normalize codes, e.g. \"L1\" -> \"L001\", \"1\" -> \"L001\"\r\nnorm_code <- function(x, prefix) {\r\n  x <- as.character(x)\r\n  digits <- str_extract(x, \"\\\\d+\")\r\n  digits <- as.integer(digits)\r\n  sprintf(\"%s%03d\", prefix, digits)\r\n}\r\n\r\nui <- fluidPage(\r\n  titlePanel(\"Lentil × Wheat plot matrix\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      fileInput(\"file\", \"Upload CSV (Plot,Lentil,Wheat[,Replicate,Location])\", accept = \".csv\"),\r\n      actionButton(\"sample\", \"Load example data (multi-rep)\"),\r\n      hr(),\r\n      helpText(\"Click a cell to list all plots for that Lentil × Wheat combination (shows Plot, Replicate, Location).\"),\r\n      width = 3\r\n    ),\r\n    mainPanel(\r\n      plotlyOutput(\"grid\", height = \"760px\"),\r\n      htmlOutput(\"click_header\"),\r\n      DTOutput(\"selected_table\"),\r\n      hr(),\r\n      DTOutput(\"table_all\")\r\n    )\r\n  )\r\n)\r\n\r\nserver <- function(input, output, session) {\r\n  raw_df <- reactiveVal(NULL)\r\n  observeEvent(input$file, {\r\n    req(input$file)\r\n    df <- read.csv(input$file$datapath, stringsAsFactors = FALSE)\r\n    names(df) <- make.names(names(df))\r\n    if (!all(c(\"Plot\",\"Lentil\",\"Wheat\") %in% names(df))) {\r\n      showModal(modalDialog(\r\n        title = \"Error\",\r\n        \"CSV must contain columns named 'Plot', 'Lentil', 'Wheat' (case-insensitive). Optional: 'Replicate', 'Location'.\"\r\n      ))\r\n      return()\r\n    }\r\n    keep_cols <- intersect(c(\"Plot\",\"Lentil\",\"Wheat\",\"Replicate\",\"Location\"), names(df))\r\n    df <- df[, keep_cols, drop = FALSE]\r\n    raw_df(df)\r\n  })\r\n  \r\n  observeEvent(input$sample, {\r\n    df <- tibble::tribble(\r\n      ~Plot, ~Lentil, ~Wheat, ~Replicate, ~Location,\r\n      5043, \"L001\", \"W001\", 1, \"SiteA\",\r\n      7001, \"L001\", \"W001\", 2, \"SiteB\",\r\n      5284, \"L001\", \"W002\", 1, \"SiteA\",\r\n      6122, \"L001\", \"W002\", 2, \"SiteA\",\r\n      6004, \"L001\", \"W003\", 1, \"SiteA\",\r\n      5359, \"L001\", \"W004\", 1, \"SiteA\",\r\n      5911, \"L001\", \"W005\", 1, \"SiteA\",\r\n      5917, \"L001\", \"W006\", 1, \"SiteA\",\r\n      5503, \"L001\", \"W007\", 1, \"SiteA\",\r\n      5885, \"L001\", \"W008\", 1, \"SiteA\",\r\n      6029, \"L001\", \"W009\", 1, \"SiteA\",\r\n      5646, \"L001\", \"W010\", 1, \"SiteA\",\r\n      5148, \"L002\", \"W011\", 1, \"SiteA\",\r\n      6500, \"L002\", \"W011\", 2, \"SiteB\",\r\n      5509, \"L002\", \"W012\", 1, \"SiteA\",\r\n      5510, \"L002\", \"W013\", 1, \"SiteA\",\r\n      5390, \"L002\", \"W014\", 1, \"SiteA\",\r\n      6043, \"L002\", \"W015\", 1, \"SiteA\",\r\n      6059, \"L002\", \"W016\", 1, \"SiteA\",\r\n      5425, \"L002\", \"W017\", 1, \"SiteA\",\r\n      5428, \"L002\", \"W018\", 1, \"SiteA\",\r\n      5065, \"L002\", \"W019\", 1, \"SiteA\",\r\n      5560, \"L002\", \"W020\", 1, \"SiteA\",\r\n      5742, \"L003\", \"W021\", 1, \"SiteA\"\r\n    )\r\n    raw_df(df)\r\n  })\r\n  \r\n  processed <- reactive({\r\n    df <- raw_df()\r\n    if (is.null(df)) {\r\n      df <- data.frame(Plot = integer(0), Lentil = character(0), Wheat = character(0),\r\n                       Replicate = character(0), Location = character(0), stringsAsFactors = FALSE)\r\n    } else {\r\n      if (!\"Replicate\" %in% names(df)) df$Replicate <- NA_character_\r\n      if (!\"Location\"  %in% names(df)) df$Location  <- NA_character_\r\n    }\r\n    \r\n    df <- df %>%\r\n      mutate(\r\n        Lentil = norm_code(Lentil, \"L\"),\r\n        Wheat  = norm_code(Wheat, \"W\"),\r\n        Replicate = as.character(Replicate),\r\n        Location = as.character(Location),\r\n        Plot = as.character(Plot)\r\n      ) %>%\r\n      filter(!is.na(Lentil) & !is.na(Wheat))\r\n    \r\n    full <- df %>% select(Plot, Lentil, Wheat, Replicate, Location)\r\n    \r\n    summary_df <- full %>%\r\n      group_by(Lentil, Wheat) %>%\r\n      summarize(\r\n        n_plots = n(),\r\n        .groups = \"drop\"\r\n      )\r\n    \r\n    lentils <- sprintf(\"L%03d\", 1:100)\r\n    wheats  <- sprintf(\"W%03d\", 1:100)\r\n    grid <- expand_grid(Lentil = lentils, Wheat = wheats) %>%\r\n      left_join(summary_df, by = c(\"Lentil\", \"Wheat\")) %>%\r\n      mutate(\r\n        n_plots = ifelse(is.na(n_plots), 0L, n_plots),\r\n        n_plots_capped = pmin(n_plots, 8L),\r\n        Li = as.integer(str_sub(Lentil, 2)),\r\n        Wi = as.integer(str_sub(Wheat, 2)),\r\n        hover = paste0(\"Lentil: \", Lentil, \"<br>Wheat: \", Wheat, \"<br>n plots: \", n_plots)\r\n      )\r\n    \r\n    list(full = full, grid = grid)\r\n  })\r\n  \r\n  clicked <- reactiveVal(NULL)\r\n  \r\n  output$grid <- renderPlotly({\r\n    pr <- processed()\r\n    grid <- pr$grid\r\n    \r\n    # ensure discrete factor / string for plotly discrete colours\r\n    grid$n_factor <- factor(as.character(grid$n_plots_capped), levels = as.character(0:8))\r\n    \r\n    # your custom palette (length 9)\r\n    user_pal <- c(\r\n      \"#B10318FF\", \"#DBA13AFF\", \"#309343FF\", \"#D82526FF\", \"#FFC156FF\", \"#69B764FF\", \"#F26C64FF\", \"#FFDD71FF\", \"#9FCD99FF\"\r\n    )\r\n    \r\n    wheat_labels <- sprintf(\"W%03d\", 1:100)\r\n    lentil_labels <- sprintf(\"L%03d\", 1:100)\r\n    \r\n    # base scatter grid: use square markers to mimic tiles\r\n    p <- plot_ly(\r\n      data = grid,\r\n      x = ~Wi, y = ~Li,\r\n      text = ~hover,\r\n      hoverinfo = \"text\",\r\n      type = \"scatter\",\r\n      mode = \"markers\",\r\n      color = ~n_factor,\r\n      colors = user_pal,\r\n      marker = list(\r\n        symbol = \"square\",\r\n        sizemode = \"diameter\",\r\n        # Adjust size to taste: if cells look too small/large change this number\r\n        size = 11,\r\n        line = list(width = 0)\r\n      ),\r\n      source = \"grid\",\r\n      showlegend = TRUE\r\n    ) %>%\r\n      layout(legend=list(title=list(text='n_plot')),\r\n             xaxis = list(\r\n               title = \"Wheat (W001 → W100)\",\r\n               tickmode = \"array\",\r\n               tickvals = seq(1,100,by=5),\r\n               ticktext = wheat_labels[seq(1,100,by=5)],\r\n               range = c(0.5, 100.5),\r\n               zeroline = FALSE\r\n             ),\r\n             yaxis = list(\r\n               title = \"Lentil (L001 → L100)\",\r\n               tickmode = \"array\",\r\n               tickvals = seq(1,100,by=5),\r\n               ticktext = lentil_labels[seq(1,100,by=5)],\r\n               range = c(100.5, 0.5), # reverse so L001 is on top\r\n               zeroline = FALSE\r\n             ),\r\n             # keep 1:1 aspect so squares stay square\r\n             dragmode = \"zoom\",\r\n             plot_bgcolor = \"#f7f7f7\"\r\n      )\r\n    \r\n    # overlay the selected cell (bigger open circle)\r\n    sel <- clicked()\r\n    if (!is.null(sel)) {\r\n      p <- p %>% add_trace(\r\n        x = sel$Wi, y = sel$Li,\r\n        type = \"scatter\", mode = \"markers\",\r\n        marker = list(size = 26, symbol = \"circle-open\", line = list(width = 3, color = \"#000000\")),\r\n        inherit = FALSE, showlegend = FALSE\r\n      )\r\n    }\r\n    \r\n    p\r\n  })\r\n  \r\n  \r\n  observeEvent(event_data(\"plotly_click\", source = \"grid\"), {\r\n    d <- event_data(\"plotly_click\", source = \"grid\")\r\n    if (is.null(d)) return()\r\n    Wi <- round(d$x); Li <- round(d$y)\r\n    pr <- processed()\r\n    grid <- pr$grid\r\n    row <- grid %>% filter(Wi == !!Wi, Li == !!Li)\r\n    if (nrow(row) == 0) { clicked(NULL); return() }\r\n    clicked(list(Wi = Wi, Li = Li, Lentil = row$Lentil[1], Wheat = row$Wheat[1], n_plots = row$n_plots[1]))\r\n  })\r\n  \r\n  output$click_header <- renderUI({\r\n    sel <- clicked()\r\n    if (is.null(sel)) {\r\n      HTML(\"<b>No cell selected.<\/b> Click any cell in the grid to see all plots (with replicate & location).\")\r\n    } else {\r\n      if (sel$n_plots > 0) {\r\n        HTML(sprintf(\"<b>Selected combination:<\/b><br>Lentil: <code>%s<\/code> &nbsp;&nbsp; Wheat: <code>%s<\/code><br><b>Total plots:<\/b> %d\",\r\n                     sel$Lentil, sel$Wheat, sel$n_plots))\r\n      } else {\r\n        HTML(sprintf(\"<b>Selected combination:<\/b><br>Lentil: <code>%s<\/code> &nbsp;&nbsp; Wheat: <code>%s<\/code><br><i>No plots for this combination.<\/i>\",\r\n                     sel$Lentil, sel$Wheat))\r\n      }\r\n    }\r\n  })\r\n  \r\n  output$selected_table <- renderDT({\r\n    sel <- clicked()\r\n    if (is.null(sel) || sel$n_plots == 0) {\r\n      datatable(data.frame(), options = list(dom = 't'), rownames = FALSE)\r\n    } else {\r\n      pr <- processed()\r\n      df <- pr$full %>%\r\n        filter(Lentil == sel$Lentil, Wheat == sel$Wheat) %>%\r\n        select(Plot, Replicate, Location) %>%\r\n        arrange(Replicate, Location, Plot)\r\n      datatable(df, options = list(pageLength = 10, searchHighlight = TRUE), rownames = FALSE)\r\n    }\r\n  })\r\n  \r\n  output$table_all <- renderDT({\r\n    pr <- processed()\r\n    grid_df <- pr$grid %>% filter(n_plots > 0) %>% select(Lentil, Wheat, n_plots)\r\n    datatable(grid_df, options = list(pageLength = 10, searching = TRUE), rownames = FALSE)\r\n  })\r\n}\r\n\r\nshinyApp(ui, server)","type":"text"}]
